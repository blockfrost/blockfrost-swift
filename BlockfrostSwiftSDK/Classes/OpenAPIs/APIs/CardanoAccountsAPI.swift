//
// CardanoAccountsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class CardanoAccountsAPI: BaseService {
    /**
     Account associated addresses

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getAccountAddresses(
        stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountAddressesContent], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getAccountAddressesWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }

    /**
     Account associated addresses. Fetches all paged records.

      - parameter stakeAddress: (path) Bech32 stake address.
      - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getAccountAddressesAll(
        stakeAddress: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountAddressesContent], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<AccountAddressesContent>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getAccountAddresses(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Account associated addresses

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [AccountAddressesContent]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getAccountAddressesAsync(
            stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [AccountAddressesContent] {
        try await asyncWrapper {
            getAccountAddressesWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }
    
    /**
    Account associated addresses. Fetches all paged records.

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getAccountAddressesAllAsync(
            stakeAddress: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [AccountAddressesContent] {
        let loader = PageLoader<AccountAddressesContent>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getAccountAddresses(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Account associated addresses
     - GET /accounts/{stake_address}/addresses
     - Obtain information about the addresses of a specific account.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[AccountAddressesContent]>
     */
    open func getAccountAddressesWithRequestBuilder(stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[AccountAddressesContent]> {
        var localVariablePath = "/accounts/{stake_address}/addresses"
        let stakeAddressPreEscape = "\(APIHelper.mapValueToPathItem(stakeAddress))"
        let stakeAddressPostEscape = stakeAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stake_address}", with: stakeAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AccountAddressesContent]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Assets associated with the account addresses

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getAccountAssets(
        stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountAddressesAsset], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getAccountAssetsWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }

    /**
     Assets associated with the account addresses. Fetches all paged records.

      - parameter stakeAddress: (path) Bech32 stake address.
      - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getAccountAssetsAll(
        stakeAddress: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountAddressesAsset], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<AccountAddressesAsset>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getAccountAssets(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Assets associated with the account addresses

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [AccountAddressesAssets]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getAccountAssetsAsync(
            stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [AccountAddressesAsset] {
        try await asyncWrapper {
            getAccountAssetsWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }
    
    /**
    Assets associated with the account addresses. Fetches all paged records.

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getAccountAssetsAllAsync(
            stakeAddress: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [AccountAddressesAsset] {
        let loader = PageLoader<AccountAddressesAsset>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getAccountAssets(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Assets associated with the account addresses
     - GET /accounts/{stake_address}/addresses/assets
     - Obtain information about assets associated with addresses of a specific account.  <b>Be careful</b>, as an account could be part of a mangled address and does not necessarily mean the addresses are owned by user as the account.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[AccountAddressesAsset]>
     */
    open func getAccountAssetsWithRequestBuilder(stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[AccountAddressesAsset]> {
        var localVariablePath = "/accounts/{stake_address}/addresses/assets"
        let stakeAddressPreEscape = "\(APIHelper.mapValueToPathItem(stakeAddress))"
        let stakeAddressPostEscape = stakeAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stake_address}", with: stakeAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AccountAddressesAsset]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Specific account address

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getAccountByStakeAddress(
        stakeAddress: String,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<AccountContent, Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getAccountByStakeAddressWithRequestBuilder(stakeAddress: stakeAddress)
        }
    }

    /**
     Specific account address

     - parameter stakeAddress: (path) Bech32 stake address.
     - returns: AccountContent
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getAccountByStakeAddressAsync(
            stakeAddress: String
    ) async throws -> AccountContent {
        try await asyncWrapper {
            getAccountByStakeAddressWithRequestBuilder(stakeAddress: stakeAddress)
        }
    }

    /**
     Specific account address
     - GET /accounts/{stake_address}
     - Obtain information about a specific stake account.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter stakeAddress: (path) Bech32 stake address.
     - returns: RequestBuilder<AccountContent>
     */
    open func getAccountByStakeAddressWithRequestBuilder(stakeAddress: String) -> RequestBuilder<AccountContent> {
        var localVariablePath = "/accounts/{stake_address}"
        let stakeAddressPreEscape = "\(APIHelper.mapValueToPathItem(stakeAddress))"
        let stakeAddressPostEscape = stakeAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stake_address}", with: stakeAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountContent>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Account delegation history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getAccountDelegationHistory(
        stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountDelegationContent], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getAccountDelegationHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }

    /**
     Account delegation history. Fetches all paged records.

      - parameter stakeAddress: (path) Bech32 stake address.
      - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getAccountDelegationHistoryAll(
        stakeAddress: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountDelegationContent], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<AccountDelegationContent>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getAccountDelegationHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Account delegation history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [AccountDelegationContent]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getAccountDelegationHistoryAsync(
            stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [AccountDelegationContent] {
        try await asyncWrapper {
            getAccountDelegationHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }
    
    /**
    Account delegation history. Fetches all paged records.

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getAccountDelegationHistoryAllAsync(
            stakeAddress: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [AccountDelegationContent] {
        let loader = PageLoader<AccountDelegationContent>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getAccountDelegationHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Account delegation history
     - GET /accounts/{stake_address}/delegations
     - Obtain information about the delegation of a specific account.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[AccountDelegationContent]>
     */
    open func getAccountDelegationHistoryWithRequestBuilder(stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[AccountDelegationContent]> {
        var localVariablePath = "/accounts/{stake_address}/delegations"
        let stakeAddressPreEscape = "\(APIHelper.mapValueToPathItem(stakeAddress))"
        let stakeAddressPostEscape = stakeAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stake_address}", with: stakeAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AccountDelegationContent]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Account history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getAccountHistory(
        stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountHistoryContent], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getAccountHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }

    /**
     Account history. Fetches all paged records.

      - parameter stakeAddress: (path) Bech32 stake address.
      - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getAccountHistoryAll(
        stakeAddress: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountHistoryContent], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<AccountHistoryContent>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getAccountHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Account history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [AccountHistoryContent]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getAccountHistoryAsync(
            stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [AccountHistoryContent] {
        try await asyncWrapper {
            getAccountHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }
    
    /**
    Account history. Fetches all paged records.

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getAccountHistoryAllAsync(
            stakeAddress: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [AccountHistoryContent] {
        let loader = PageLoader<AccountHistoryContent>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getAccountHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Account history
     - GET /accounts/{stake_address}/history
     - Obtain information about the history of a specific account.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[AccountHistoryContent]>
     */
    open func getAccountHistoryWithRequestBuilder(stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[AccountHistoryContent]> {
        var localVariablePath = "/accounts/{stake_address}/history"
        let stakeAddressPreEscape = "\(APIHelper.mapValueToPathItem(stakeAddress))"
        let stakeAddressPostEscape = stakeAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stake_address}", with: stakeAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AccountHistoryContent]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Account MIR history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getAccountMirHistory(
        stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountMirContent], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getAccountMirHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }

    /**
     Account MIR history. Fetches all paged records.

      - parameter stakeAddress: (path) Bech32 stake address.
      - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getAccountMirHistoryAll(
        stakeAddress: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountMirContent], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<AccountMirContent>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getAccountMirHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Account MIR history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [AccountMirContent]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getAccountMirHistoryAsync(
            stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [AccountMirContent] {
        try await asyncWrapper {
            getAccountMirHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }
    
    /**
    Account MIR history. Fetches all paged records.

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getAccountMirHistoryAllAsync(
            stakeAddress: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [AccountMirContent] {
        let loader = PageLoader<AccountMirContent>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getAccountMirHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Account MIR history
     - GET /accounts/{stake_address}/mirs
     - Obtain information about the MIRs of a specific account.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[AccountMirContent]>
     */
    open func getAccountMirHistoryWithRequestBuilder(stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[AccountMirContent]> {
        var localVariablePath = "/accounts/{stake_address}/mirs"
        let stakeAddressPreEscape = "\(APIHelper.mapValueToPathItem(stakeAddress))"
        let stakeAddressPostEscape = stakeAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stake_address}", with: stakeAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AccountMirContent]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Account registration history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getAccountRegistrationHistory(
        stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountRegistrationContent], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getAccountRegistrationHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }

    /**
     Account registration history. Fetches all paged records.

      - parameter stakeAddress: (path) Bech32 stake address.
      - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getAccountRegistrationHistoryAll(
        stakeAddress: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountRegistrationContent], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<AccountRegistrationContent>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getAccountRegistrationHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Account registration history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [AccountRegistrationContent]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getAccountRegistrationHistoryAsync(
            stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [AccountRegistrationContent] {
        try await asyncWrapper {
            getAccountRegistrationHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }
    
    /**
    Account registration history. Fetches all paged records.

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getAccountRegistrationHistoryAllAsync(
            stakeAddress: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [AccountRegistrationContent] {
        let loader = PageLoader<AccountRegistrationContent>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getAccountRegistrationHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Account registration history
     - GET /accounts/{stake_address}/registrations
     - Obtain information about the registrations and deregistrations of a specific account.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[AccountRegistrationContent]>
     */
    open func getAccountRegistrationHistoryWithRequestBuilder(stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[AccountRegistrationContent]> {
        var localVariablePath = "/accounts/{stake_address}/registrations"
        let stakeAddressPreEscape = "\(APIHelper.mapValueToPathItem(stakeAddress))"
        let stakeAddressPostEscape = stakeAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stake_address}", with: stakeAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AccountRegistrationContent]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Account reward history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getAccountRewardHistory(
        stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountRewardContent], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getAccountRewardHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }

    /**
     Account reward history. Fetches all paged records.

      - parameter stakeAddress: (path) Bech32 stake address.
      - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getAccountRewardHistoryAll(
        stakeAddress: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountRewardContent], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<AccountRewardContent>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getAccountRewardHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Account reward history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [AccountRewardContent]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getAccountRewardHistoryAsync(
            stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [AccountRewardContent] {
        try await asyncWrapper {
            getAccountRewardHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }
    
    /**
    Account reward history. Fetches all paged records.

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getAccountRewardHistoryAllAsync(
            stakeAddress: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [AccountRewardContent] {
        let loader = PageLoader<AccountRewardContent>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getAccountRewardHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Account reward history
     - GET /accounts/{stake_address}/rewards
     - Obtain information about the reward history of a specific account.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[AccountRewardContent]>
     */
    open func getAccountRewardHistoryWithRequestBuilder(stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[AccountRewardContent]> {
        var localVariablePath = "/accounts/{stake_address}/rewards"
        let stakeAddressPreEscape = "\(APIHelper.mapValueToPathItem(stakeAddress))"
        let stakeAddressPostEscape = stakeAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stake_address}", with: stakeAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AccountRewardContent]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Account withdrawal history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getAccountWithdrawalHistory(
        stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountWithdrawalContent], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getAccountWithdrawalHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }

    /**
     Account withdrawal history. Fetches all paged records.

      - parameter stakeAddress: (path) Bech32 stake address.
      - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getAccountWithdrawalHistoryAll(
        stakeAddress: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[AccountWithdrawalContent], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<AccountWithdrawalContent>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getAccountWithdrawalHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Account withdrawal history

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [AccountWithdrawalContent]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getAccountWithdrawalHistoryAsync(
            stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [AccountWithdrawalContent] {
        try await asyncWrapper {
            getAccountWithdrawalHistoryWithRequestBuilder(stakeAddress: stakeAddress, count: count, page: page, order: order)
        }
    }
    
    /**
    Account withdrawal history. Fetches all paged records.

     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getAccountWithdrawalHistoryAllAsync(
            stakeAddress: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [AccountWithdrawalContent] {
        let loader = PageLoader<AccountWithdrawalContent>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getAccountWithdrawalHistory(stakeAddress: stakeAddress, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Account withdrawal history
     - GET /accounts/{stake_address}/withdrawals
     - Obtain information about the withdrawals of a specific account.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter stakeAddress: (path) Bech32 stake address.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[AccountWithdrawalContent]>
     */
    open func getAccountWithdrawalHistoryWithRequestBuilder(stakeAddress: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[AccountWithdrawalContent]> {
        var localVariablePath = "/accounts/{stake_address}/withdrawals"
        let stakeAddressPreEscape = "\(APIHelper.mapValueToPathItem(stakeAddress))"
        let stakeAddressPostEscape = stakeAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stake_address}", with: stakeAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AccountWithdrawalContent]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }
}
