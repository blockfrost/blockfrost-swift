//
// CardanoBlocksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class CardanoBlocksAPI: BaseService {
    /**
     Specific block

     - parameter hashOrNumber: (path) Hash or number of the requested block.
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getBlock(
        hashOrNumber: String,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<BlockContent, Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getBlockWithRequestBuilder(hashOrNumber: hashOrNumber)
        }
    }

    /**
     Specific block

     - parameter hashOrNumber: (path) Hash or number of the requested block.
     - returns: BlockContent
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getBlockAsync(
            hashOrNumber: String
    ) async throws -> BlockContent {
        try await asyncWrapper { completion in
            getBlockWithRequestBuilder(hashOrNumber: hashOrNumber).execute { result in completion(result) }
        }
    }

    /**
     Specific block
     - GET /blocks/{hash_or_number}
     - Return the content of a requested block.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter hashOrNumber: (path) Hash or number of the requested block.
     - returns: RequestBuilder<BlockContent>
     */
    open func getBlockWithRequestBuilder(hashOrNumber: String) -> RequestBuilder<BlockContent> {
        var localVariablePath = "/blocks/{hash_or_number}"
        let hashOrNumberPreEscape = "\(APIHelper.mapValueToPathItem(hashOrNumber))"
        let hashOrNumberPostEscape = hashOrNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash_or_number}", with: hashOrNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockContent>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Specific block in a slot in an epoch

     - parameter epochNumber: (path) Epoch for specific epoch slot.
     - parameter slotNumber: (path) Slot position for requested block.
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getBlockInEpochInSlot(
        epochNumber: Int, slotNumber: Int,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<BlockContent, Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getBlockInEpochInSlotWithRequestBuilder(epochNumber: epochNumber, slotNumber: slotNumber)
        }
    }

    /**
     Specific block in a slot in an epoch

     - parameter epochNumber: (path) Epoch for specific epoch slot.
     - parameter slotNumber: (path) Slot position for requested block.
     - returns: BlockContent
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getBlockInEpochInSlotAsync(
            epochNumber: Int, slotNumber: Int
    ) async throws -> BlockContent {
        try await asyncWrapper { completion in
            getBlockInEpochInSlotWithRequestBuilder(epochNumber: epochNumber, slotNumber: slotNumber).execute { result in completion(result) }
        }
    }

    /**
     Specific block in a slot in an epoch
     - GET /blocks/epoch/{epoch_number}/slot/{slot_number}
     - Return the content of a requested block for a specific slot in an epoch.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter epochNumber: (path) Epoch for specific epoch slot.
     - parameter slotNumber: (path) Slot position for requested block.
     - returns: RequestBuilder<BlockContent>
     */
    open func getBlockInEpochInSlotWithRequestBuilder(epochNumber: Int, slotNumber: Int) -> RequestBuilder<BlockContent> {
        var localVariablePath = "/blocks/epoch/{epoch_number}/slot/{slot_number}"
        let epochNumberPreEscape = "\(APIHelper.mapValueToPathItem(epochNumber))"
        let epochNumberPostEscape = epochNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{epoch_number}", with: epochNumberPostEscape, options: .literal, range: nil)
        let slotNumberPreEscape = "\(APIHelper.mapValueToPathItem(slotNumber))"
        let slotNumberPostEscape = slotNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slot_number}", with: slotNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockContent>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Specific block in a slot

     - parameter slotNumber: (path) Slot position for requested block.
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getBlockInSlot(
        slotNumber: Int,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<BlockContent, Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getBlockInSlotWithRequestBuilder(slotNumber: slotNumber)
        }
    }

    /**
     Specific block in a slot

     - parameter slotNumber: (path) Slot position for requested block.
     - returns: BlockContent
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getBlockInSlotAsync(
            slotNumber: Int
    ) async throws -> BlockContent {
        try await asyncWrapper { completion in
            getBlockInSlotWithRequestBuilder(slotNumber: slotNumber).execute { result in completion(result) }
        }
    }

    /**
     Specific block in a slot
     - GET /blocks/slot/{slot_number}
     - Return the content of a requested block for a specific slot.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter slotNumber: (path) Slot position for requested block.
     - returns: RequestBuilder<BlockContent>
     */
    open func getBlockInSlotWithRequestBuilder(slotNumber: Int) -> RequestBuilder<BlockContent> {
        var localVariablePath = "/blocks/slot/{slot_number}"
        let slotNumberPreEscape = "\(APIHelper.mapValueToPathItem(slotNumber))"
        let slotNumberPostEscape = slotNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slot_number}", with: slotNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockContent>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Block transactions

     - parameter hashOrNumber: (path) Hash of the requested block.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) Ordered by tx index in the block. The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getBlockTransactions(
        hashOrNumber: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[String], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getBlockTransactionsWithRequestBuilder(hashOrNumber: hashOrNumber, count: count, page: page, order: order)
        }
    }

    /**
     Block transactions. Fetches all paged records.

      - parameter hashOrNumber: (path) Hash of the requested block.
      - parameter order: (query) Ordered by tx index in the block. The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getBlockTransactionsAll(
        hashOrNumber: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[String], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<String>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getBlockTransactions(hashOrNumber: hashOrNumber, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Block transactions

     - parameter hashOrNumber: (path) Hash of the requested block.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) Ordered by tx index in the block. The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [String]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getBlockTransactionsAsync(
            hashOrNumber: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [String] {
        try await asyncWrapper { completion in
            getBlockTransactionsWithRequestBuilder(hashOrNumber: hashOrNumber, count: count, page: page, order: order).execute { result in completion(result) }
        }
    }
    
    /**
    Block transactions. Fetches all paged records.

     - parameter hashOrNumber: (path) Hash of the requested block.
     - parameter order: (query) Ordered by tx index in the block. The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getBlockTransactionsAllAsync(
            hashOrNumber: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [String] {
        let loader = PageLoader<String>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getBlockTransactions(hashOrNumber: hashOrNumber, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Block transactions
     - GET /blocks/{hash_or_number}/txs
     - Return the transactions within the block.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter hashOrNumber: (path) Hash of the requested block.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) Ordered by tx index in the block. The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[String]>
     */
    open func getBlockTransactionsWithRequestBuilder(hashOrNumber: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[String]> {
        var localVariablePath = "/blocks/{hash_or_number}/txs"
        let hashOrNumberPreEscape = "\(APIHelper.mapValueToPathItem(hashOrNumber))"
        let hashOrNumberPostEscape = hashOrNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash_or_number}", with: hashOrNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Latest block

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getLatestBlock(apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ result: Swift.Result<BlockContent, Error>) -> Void) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getLatestBlockWithRequestBuilder()
        }
    }

    /**
     Latest block

     - returns: BlockContent
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getLatestBlockAsync(

    ) async throws -> BlockContent {
        try await asyncWrapper { completion in
            getLatestBlockWithRequestBuilder().execute { result in completion(result) }
        }
    }

    /**
     Latest block
     - GET /blocks/latest
     - Return the latest block available to the backends, also known as the tip of the blockchain.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - returns: RequestBuilder<BlockContent>
     */
    open func getLatestBlockWithRequestBuilder() -> RequestBuilder<BlockContent> {
        let localVariablePath = "/blocks/latest"
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockContent>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Listing of next blocks

     - parameter hashOrNumber: (path) Hash of the requested block.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getNextBlocks(
        hashOrNumber: String, count: Int? = nil, page: Int? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[BlockContent], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getNextBlocksWithRequestBuilder(hashOrNumber: hashOrNumber, count: count, page: page)
        }
    }

    /**
     Listing of next blocks. Fetches all paged records.

      - parameter hashOrNumber: (path) Hash of the requested block.
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getNextBlocksAll(
        hashOrNumber: String,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[BlockContent], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<BlockContent>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getNextBlocks(hashOrNumber: hashOrNumber, count: count, page: page, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Listing of next blocks

     - parameter hashOrNumber: (path) Hash of the requested block.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - returns: [BlockContent]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getNextBlocksAsync(
            hashOrNumber: String, count: Int? = nil, page: Int? = nil
    ) async throws -> [BlockContent] {
        try await asyncWrapper { completion in
            getNextBlocksWithRequestBuilder(hashOrNumber: hashOrNumber, count: count, page: page).execute { result in completion(result) }
        }
    }
    /**
    Listing of next blocks. Fetches all paged records.

     - parameter hashOrNumber: (path) Hash of the requested block.
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getNextBlocksAllAsync(
            hashOrNumber: String,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [BlockContent] {
        let loader = PageLoader<BlockContent>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getNextBlocks(hashOrNumber: hashOrNumber, count: count, page: page, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Listing of next blocks
     - GET /blocks/{hash_or_number}/next
     - Return the list of blocks following a specific block.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter hashOrNumber: (path) Hash of the requested block.
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - returns: RequestBuilder<[BlockContent]>
     */
    open func getNextBlocksWithRequestBuilder(hashOrNumber: String, count: Int? = nil, page: Int? = nil) -> RequestBuilder<[BlockContent]> {
        var localVariablePath = "/blocks/{hash_or_number}/next"
        let hashOrNumberPreEscape = "\(APIHelper.mapValueToPathItem(hashOrNumber))"
        let hashOrNumberPostEscape = hashOrNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash_or_number}", with: hashOrNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[BlockContent]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Listing of previous blocks

     - parameter hashOrNumber: (path) Hash of the requested block
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getPreviousBlocks(
        hashOrNumber: String, count: Int? = nil, page: Int? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[BlockContent], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getPreviousBlocksWithRequestBuilder(hashOrNumber: hashOrNumber, count: count, page: page)
        }
    }

    /**
     Listing of previous blocks. Fetches all paged records.

      - parameter hashOrNumber: (path) Hash of the requested block
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getPreviousBlocksAll(
        hashOrNumber: String,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[BlockContent], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<BlockContent>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getPreviousBlocks(hashOrNumber: hashOrNumber, count: count, page: page, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Listing of previous blocks

     - parameter hashOrNumber: (path) Hash of the requested block
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - returns: [BlockContent]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getPreviousBlocksAsync(
            hashOrNumber: String, count: Int? = nil, page: Int? = nil
    ) async throws -> [BlockContent] {
        try await asyncWrapper { completion in
            getPreviousBlocksWithRequestBuilder(hashOrNumber: hashOrNumber, count: count, page: page).execute { result in completion(result) }
        }
    }
    
    /**
    Listing of previous blocks. Fetches all paged records.

     - parameter hashOrNumber: (path) Hash of the requested block
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getPreviousBlocksAllAsync(
            hashOrNumber: String,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [BlockContent] {
        let loader = PageLoader<BlockContent>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getPreviousBlocks(hashOrNumber: hashOrNumber, count: count, page: page, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Listing of previous blocks
     - GET /blocks/{hash_or_number}/previous
     - Return the list of blocks preceding a specific block.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter hashOrNumber: (path) Hash of the requested block
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - returns: RequestBuilder<[BlockContent]>
     */
    open func getPreviousBlocksWithRequestBuilder(hashOrNumber: String, count: Int? = nil, page: Int? = nil) -> RequestBuilder<[BlockContent]> {
        var localVariablePath = "/blocks/{hash_or_number}/previous"
        let hashOrNumberPreEscape = "\(APIHelper.mapValueToPathItem(hashOrNumber))"
        let hashOrNumberPostEscape = hashOrNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash_or_number}", with: hashOrNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[BlockContent]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Latest block transactions

     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) Ordered by tx index in the block. The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getTransactionsInLatestBlock(
        count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[String], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getTransactionsInLatestBlockWithRequestBuilder(count: count, page: page, order: order)
        }
    }

    /**
     Latest block transactions. Fetches all paged records.

      - parameter order: (query) Ordered by tx index in the block. The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
      - parameter apiResponseQueue: The queue on which api response is dispatched.
      - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
      - parameter completion: completion handler to receive the result
      */
    open func getTransactionsInLatestBlockAll(
        order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[String], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<String>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getTransactionsInLatestBlock(count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**
     Latest block transactions

     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) Ordered by tx index in the block. The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [String]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getTransactionsInLatestBlockAsync(
            count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [String] {
        try await asyncWrapper { completion in
            getTransactionsInLatestBlockWithRequestBuilder(count: count, page: page, order: order).execute { result in completion(result) }
        }
    }
    
    /**
    Latest block transactions. Fetches all paged records.

     - parameter order: (query) Ordered by tx index in the block. The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getTransactionsInLatestBlockAllAsync(
            order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [String] {
        let loader = PageLoader<String>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getTransactionsInLatestBlock(count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     Latest block transactions
     - GET /blocks/latest/txs
     - Return the transactions within the latest block.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) Ordered by tx index in the block. The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[String]>
     */
    open func getTransactionsInLatestBlockWithRequestBuilder(count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[String]> {
        let localVariablePath = "/blocks/latest/txs"
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }
}
