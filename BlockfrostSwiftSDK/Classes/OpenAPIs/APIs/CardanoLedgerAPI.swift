//
// CardanoLedgerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class CardanoLedgerAPI: BaseService {
    /**
     Blockchain genesis

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getGenesis(apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ result: Swift.Result<GenesisContent, Error>) -> Void) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getGenesisWithRequestBuilder()
        }
    }

    /**
     Blockchain genesis

     - returns: GenesisContent
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getGenesisAsync(

    ) async throws -> GenesisContent {
        try await asyncWrapper { completion in
            getGenesisWithRequestBuilder().execute { result in completion(result) }
        }
    }

    /**
     Blockchain genesis
     - GET /genesis
     - Return the information about blockchain genesis.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - returns: RequestBuilder<GenesisContent>
     */
    open func getGenesisWithRequestBuilder() -> RequestBuilder<GenesisContent> {
        let localVariablePath = "/genesis"
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenesisContent>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }
}
