//
// HealthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class HealthAPI: BaseService {
    /**
     Root endpoint

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getApiRoot(apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ result: Swift.Result<ApiRoot, Error>) -> Void) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getApiRootWithRequestBuilder()
        }
    }

    /**
     Root endpoint

     - returns: GetApiRoot200Response
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getApiRootAsync(

    ) async throws -> ApiRoot {
        try await asyncWrapper {
            getApiRootWithRequestBuilder()
        }
    }

    /**
     Root endpoint
     - GET /
     - Root endpoint has no other function than to point end users to documentation.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - returns: RequestBuilder<ApiRoot>
     */
    open func getApiRootWithRequestBuilder() -> RequestBuilder<ApiRoot> {
        let localVariablePath = "/"
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiRoot>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Current backend time

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getCurrentBackendTime(apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ result: Swift.Result<Clock, Error>) -> Void) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getCurrentBackendTimeWithRequestBuilder()
        }
    }

    /**
     Current backend time

     - returns: GetCurrentBackendTime200Response
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getCurrentBackendTimeAsync(

    ) async throws -> Clock {
        try await asyncWrapper {
            getCurrentBackendTimeWithRequestBuilder()
        }
    }

    /**
     Current backend time
     - GET /health/clock
     - This endpoint provides the current UNIX time. Your application might use this to verify if the client clock is not out of sync.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - returns: RequestBuilder<Clock>
     */
    open func getCurrentBackendTimeWithRequestBuilder() -> RequestBuilder<Clock> {
        let localVariablePath = "/health/clock"
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Clock>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**
     Backend health status

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getHealth(apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ result: Swift.Result<Health, Error>) -> Void) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getHealthWithRequestBuilder()
        }
    }

    /**
     Backend health status

     - returns: GetHealth200Response
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getHealthAsync(

    ) async throws -> Health {
        try await asyncWrapper {
            getHealthWithRequestBuilder()
        }
    }

    /**
     Backend health status
     - GET /health
     - Return backend status as a boolean. Your application     should handle situations when backend for the given chain is unavailable.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - returns: RequestBuilder<Health>
     */
    open func getHealthWithRequestBuilder() -> RequestBuilder<Health> {
        let localVariablePath = "/health"
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Health>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }
}
