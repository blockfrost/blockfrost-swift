//
// IPFSAddAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class IPFSAddAPI: BaseService {
    /**
     Add a file to IPFS

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func add(file: URL, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ result: Swift.Result<IPFSObject, Error>) -> Void) -> APIRequest {
        addWithRequestBuilder(file: file)
            .execute(apiResponseQueue ?? config.apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    completion(.success(response.body!))
                case let .failure(error):
                    completion(.failure(error))
                }
            }
    }

    /**
     Add a file to IPFS
     - POST /ipfs/add
     - You need to `/ipfs/pin/add` an object to avoid it being garbage collected. This usage is being counted in your user account quota.
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - returns: RequestBuilder<IPFSObject>
     */
    open func addWithRequestBuilder(file: URL) -> RequestBuilder<IPFSObject> {
        let localVariablePath = "/ipfs/add"
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = ["file": file]

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IPFSObject>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
