//
// IPFSGatewayAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class IPFSGatewayAPI: BaseService {
    public override init(config: BlockfrostConfig?) {
        super.init(config: config ?? BlockfrostConfig.ipfsDefault())
    }
    
    /**
     Relay to an IPFS gateway

     - parameter iPFSPath: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func callGet(
        iPFSPath: String,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<Data, Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            callGetWithRequestBuilder(iPFSPath: iPFSPath)
        }
    }

    /**
     Relay to an IPFS gateway

     - parameter iPFSPath: (path)
     - returns: Void
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func callGetAsync(
            iPFSPath: String
    ) async throws {
        try await asyncWrapper {
            callGetWithRequestBuilder(iPFSPath: iPFSPath)
        }
    }

    /**
     Relay to an IPFS gateway
     - GET /ipfs/gateway/{IPFS_path}
     - Retrieve an object from the IFPS gateway (useful if you do not want to rely on a public gateway, such as `ipfs.blockfrost.dev`).
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter iPFSPath: (path)
     - returns: RequestBuilder<Void>
     */
    open func callGetWithRequestBuilder(iPFSPath: String) -> RequestBuilder<Data> {
        var localVariablePath = "/ipfs/gateway/{IPFS_path}"
        let iPFSPathPreEscape = "\(APIHelper.mapValueToPathItem(iPFSPath))"
        let iPFSPathPostEscape = iPFSPathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{IPFS_path}", with: iPFSPathPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = config.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }
}
