//
// NutLinkAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class NutLinkAPI: BaseService {
    /**

     - parameter address: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getAddress(
        address: String,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<NutlinkAddress, Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getAddressWithRequestBuilder(address: address)
        }
    }

    /**

     - parameter address: (path)
     - returns: NutlinkAddress
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getAddressAsync(
            address: String
    ) async throws -> NutlinkAddress {
        try await asyncWrapper { completion in
            getAddressWithRequestBuilder(address: address).execute { result in completion(result) }
        }
    }

    /**
     - GET /nutlink/{address}
     - List metadata about specific address
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter address: (path)
     - returns: RequestBuilder<NutlinkAddress>
     */
    open func getAddressWithRequestBuilder(address: String) -> RequestBuilder<NutlinkAddress> {
        var localVariablePath = "/nutlink/{address}"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NutlinkAddress>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**

     - parameter address: (path)
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getAddressTickers(
        address: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[NutlinkAddressTickers], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getAddressTickersWithRequestBuilder(address: address, count: count, page: page, order: order)
        }
    }

    /**

     - parameter address: (path)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     - parameter completion: completion handler to receive the result
     */
    open func getAddressTickersAll(
        address: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[NutlinkAddressTickers], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<NutlinkAddressTickers>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getAddressTickers(address: address, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**

     - parameter address: (path)
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [NutlinkAddressTickers]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getAddressTickersAsync(
            address: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [NutlinkAddressTickers] {
        try await asyncWrapper { completion in
            getAddressTickersWithRequestBuilder(address: address, count: count, page: page, order: order).execute { result in completion(result) }
        }
    }

    /**

     - parameter address: (path)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getAddressTickersAllAsync(
            address: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [NutlinkAddressTickers] {
        let loader = PageLoader<NutlinkAddressTickers>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getAddressTickers(address: address, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     - GET /nutlink/{address}/tickers
     - List tickers for a specific metadata oracle
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter address: (path)
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[NutlinkAddressTicker]>
     */
    open func getAddressTickersWithRequestBuilder(address: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[NutlinkAddressTickers]> {
        var localVariablePath = "/nutlink/{address}/tickers"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[NutlinkAddressTickers]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**

     - parameter address: (path)
     - parameter ticker: (path)
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getTickerRecordsByAddressAndTicker(
        address: String, ticker: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[NutlinkAddressTicker], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getTickerRecordsByAddressAndTickerWithRequestBuilder(address: address, ticker: ticker, count: count, page: page, order: order)
        }
    }

    /**

     - parameter address: (path)
     - parameter ticker: (path)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     - parameter completion: completion handler to receive the result
     */
    open func getTickerRecordsByAddressAndTickerAll(
        address: String, ticker: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[NutlinkAddressTicker], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<NutlinkAddressTicker>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getTickerRecordsByAddressAndTicker(address: address, ticker: ticker, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**

     - parameter address: (path)
     - parameter ticker: (path)
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [NutlinkAddressTicker]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getTickerRecordsByAddressAndTickerAsync(
            address: String, ticker: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [NutlinkAddressTicker] {
        try await asyncWrapper { completion in
            getTickerRecordsByAddressAndTickerWithRequestBuilder(address: address, ticker: ticker, count: count, page: page, order: order).execute { result in completion(result) }
        }
    }

    /**

     - parameter address: (path)
     - parameter ticker: (path)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getTickerRecordsByAddressAndTickerAllAsync(
            address: String, ticker: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [NutlinkAddressTicker] {
        let loader = PageLoader<NutlinkAddressTicker>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getTickerRecordsByAddressAndTicker(address: address, ticker: ticker, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     - GET /nutlink/{address}/tickers/{ticker}
     - List of records of a specific ticker
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter address: (path)
     - parameter ticker: (path)
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[NutlinkAddressTicker]>
     */
    open func getTickerRecordsByAddressAndTickerWithRequestBuilder(address: String, ticker: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[NutlinkAddressTicker]> {
        var localVariablePath = "/nutlink/{address}/tickers/{ticker}"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let tickerPreEscape = "\(APIHelper.mapValueToPathItem(ticker))"
        let tickerPostEscape = tickerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ticker}", with: tickerPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[NutlinkAddressTicker]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }

    /**

     - parameter ticker: (path)
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open func getTickerRecordsByTicker(
        ticker: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        completion: @escaping (_ result: Swift.Result<[NutlinkTickersTicker], Error>) -> Void
    ) -> APIRequest {
        completionWrapper(apiResponseQueue, completion: completion) {
            getTickerRecordsByTickerWithRequestBuilder(ticker: ticker, count: count, page: page, order: order)
        }
    }

    /**

     - parameter ticker: (path)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     - parameter completion: completion handler to receive the result
     */
    open func getTickerRecordsByTickerAll(
        ticker: String, order: SortOrder? = nil,
        apiResponseQueue: DispatchQueue? = nil,
        batchSize: Int? = nil,
        completion: @escaping (_ result: Swift.Result<[NutlinkTickersTicker], Error>) -> Void
    ) -> APIRequest {
        let loader = PageLoader<NutlinkTickersTicker>(batchSize: batchSize ?? config.batchSize)
        loader.loadAll({ count, page, compl in
            _ = self.getTickerRecordsByTicker(ticker: ticker, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        }, completion: { compl in
            completion(compl)
        })
        return APILoaderRequest(loader: loader)
    }

    /**

     - parameter ticker: (path)
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: [NutlinkTickersTicker]
     */
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    open func getTickerRecordsByTickerAsync(
            ticker: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil
    ) async throws -> [NutlinkTickersTicker] {
        try await asyncWrapper { completion in
            getTickerRecordsByTickerWithRequestBuilder(ticker: ticker, count: count, page: page, order: order).execute { result in completion(result) }
        }
    }
    
    /**

     - parameter ticker: (path)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter batchSize: Number of concurrent requests for page download. If nil, config.batchSize is used.
     */
    open func getTickerRecordsByTickerAllAsync(
            ticker: String, order: SortOrder? = nil,
            apiResponseQueue: DispatchQueue? = nil,
            batchSize: Int? = nil
    ) async throws -> [NutlinkTickersTicker] {
        let loader = PageLoader<NutlinkTickersTicker>(batchSize: batchSize ?? config.batchSize)
        return try await loader.loadAllAsync({ (count, page, compl) in
            let _ = self.getTickerRecordsByTicker(ticker: ticker, count: count, page: page, order: order, apiResponseQueue: apiResponseQueue, completion: compl)
        })
    }

    /**
     - GET /nutlink/tickers/{ticker}
     - List of records of a specific ticker
     - API Key:
       - type: apiKey project_id
       - name: ApiKeyAuth
     - parameter ticker: (path)
     - parameter count: (query) The number of results displayed on one page. (optional, default to 100)
     - parameter page: (query) The page number for listing the results. (optional, default to 1)
     - parameter order: (query) The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last.  (optional, default to .asc)
     - returns: RequestBuilder<[NutlinkTickersTicker]>
     */
    open func getTickerRecordsByTickerWithRequestBuilder(ticker: String, count: Int? = nil, page: Int? = nil, order: SortOrder? = nil) -> RequestBuilder<[NutlinkTickersTicker]> {
        var localVariablePath = "/nutlink/tickers/{ticker}"
        let tickerPreEscape = "\(APIHelper.mapValueToPathItem(ticker))"
        let tickerPostEscape = tickerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ticker}", with: tickerPostEscape, options: .literal, range: nil)
        let localVariableURLString = config.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[NutlinkTickersTicker]>.Type = config.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, config: self.config)
    }
}
