//
// AccountDelegationContent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public final class AccountDelegationContent: Codable, Hashable {
    /** Epoch in which the delegation becomes active */
    public var activeEpoch: Int
    /** Hash of the transaction containing the delegation */
    public var txHash: String
    /** Rewards for given epoch in Lovelaces */
    public var amount: String
    /** Bech32 ID of pool being delegated to */
    public var poolId: String

    public init(activeEpoch: Int, txHash: String, amount: String, poolId: String) {
        self.activeEpoch = activeEpoch
        self.txHash = txHash
        self.amount = amount
        self.poolId = poolId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case activeEpoch = "active_epoch"
        case txHash = "tx_hash"
        case amount
        case poolId = "pool_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(activeEpoch, forKey: .activeEpoch)
        try container.encode(txHash, forKey: .txHash)
        try container.encode(amount, forKey: .amount)
        try container.encode(poolId, forKey: .poolId)
    }

    public static func == (lhs: AccountDelegationContent, rhs: AccountDelegationContent) -> Bool {
        lhs.activeEpoch == rhs.activeEpoch &&
            lhs.txHash == rhs.txHash &&
            lhs.amount == rhs.amount &&
            lhs.poolId == rhs.poolId
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(activeEpoch.hashValue)
        hasher.combine(txHash.hashValue)
        hasher.combine(amount.hashValue)
        hasher.combine(poolId.hashValue)
    }
}
