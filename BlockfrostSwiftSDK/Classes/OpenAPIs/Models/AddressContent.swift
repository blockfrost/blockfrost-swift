//
// AddressContent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public final class AddressContent: Codable, Hashable {
    public enum ModelType: String, Codable, CaseIterable {
        case byron
        case shelley
    }

    /** Bech32 encoded addresses */
    public var address: String
    public var amount: [TxContentOutputAmount]
    /** Stake address that controls the key */
    public var stakeAddress: String?
    /** Address era */
    public var type: ModelType
    /** True if this is a script address */
    public var script: Bool

    public init(address: String, amount: [TxContentOutputAmount], stakeAddress: String?, type: ModelType, script: Bool) {
        self.address = address
        self.amount = amount
        self.stakeAddress = stakeAddress
        self.type = type
        self.script = script
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case amount
        case stakeAddress = "stake_address"
        case type
        case script
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encode(amount, forKey: .amount)
        try container.encode(stakeAddress, forKey: .stakeAddress)
        try container.encode(type, forKey: .type)
        try container.encode(script, forKey: .script)
    }

    public static func == (lhs: AddressContent, rhs: AddressContent) -> Bool {
        lhs.address == rhs.address &&
            lhs.amount == rhs.amount &&
            lhs.stakeAddress == rhs.stakeAddress &&
            lhs.type == rhs.type &&
            lhs.script == rhs.script
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address.hashValue)
        hasher.combine(amount.hashValue)
        hasher.combine(stakeAddress.hashValue)
        hasher.combine(type.hashValue)
        hasher.combine(script.hashValue)
    }
}
