//
// AddressContentTotal.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public final class AddressContentTotal: Codable, Hashable {
    /** Bech32 encoded address */
    public var address: String
    public var receivedSum: [TxContentOutputAmount]
    public var sentSum: [TxContentOutputAmount]
    /** Count of all transactions on the address */
    public var txCount: Int

    public init(address: String, receivedSum: [TxContentOutputAmount], sentSum: [TxContentOutputAmount], txCount: Int) {
        self.address = address
        self.receivedSum = receivedSum
        self.sentSum = sentSum
        self.txCount = txCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case receivedSum = "received_sum"
        case sentSum = "sent_sum"
        case txCount = "tx_count"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encode(receivedSum, forKey: .receivedSum)
        try container.encode(sentSum, forKey: .sentSum)
        try container.encode(txCount, forKey: .txCount)
    }

    public static func == (lhs: AddressContentTotal, rhs: AddressContentTotal) -> Bool {
        lhs.address == rhs.address &&
            lhs.receivedSum == rhs.receivedSum &&
            lhs.sentSum == rhs.sentSum &&
            lhs.txCount == rhs.txCount
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address.hashValue)
        hasher.combine(receivedSum.hashValue)
        hasher.combine(sentSum.hashValue)
        hasher.combine(txCount.hashValue)
    }
}
