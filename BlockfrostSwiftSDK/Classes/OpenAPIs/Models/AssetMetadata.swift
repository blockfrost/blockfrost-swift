//
// AssetMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public final class AssetMetadata: Codable, Hashable {
    /** Asset name */
    public var name: String
    /** Asset description */
    public var description: String
    public var ticker: String?
    /** Asset website */
    public var url: String?
    /** Base64 encoded logo of the asset */
    public var logo: String?
    /** Number of decimal places of the asset unit */
    public var decimals: Int?

    public init(name: String, description: String, ticker: String?, url: String?, logo: String?, decimals: Int?) {
        self.name = name
        self.description = description
        self.ticker = ticker
        self.url = url
        self.logo = logo
        self.decimals = decimals
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case ticker
        case url
        case logo
        case decimals
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(ticker, forKey: .ticker)
        try container.encode(url, forKey: .url)
        try container.encode(logo, forKey: .logo)
        try container.encode(decimals, forKey: .decimals)
    }

    public static func == (lhs: AssetMetadata, rhs: AssetMetadata) -> Bool {
        lhs.name == rhs.name &&
            lhs.description == rhs.description &&
            lhs.ticker == rhs.ticker &&
            lhs.url == rhs.url &&
            lhs.logo == rhs.logo &&
            lhs.decimals == rhs.decimals
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name.hashValue)
        hasher.combine(description.hashValue)
        hasher.combine(ticker.hashValue)
        hasher.combine(url.hashValue)
        hasher.combine(logo.hashValue)
        hasher.combine(decimals.hashValue)
    }
}
