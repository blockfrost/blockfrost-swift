//
// PoolMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public final class PoolMetadata: Codable, Hashable {
    /** Bech32 pool ID */
    public var poolId: String
    /** Hexadecimal pool ID */
    public var hex: String
    /** URL to the stake pool metadata */
    public var url: String?
    /** Hash of the metadata file */
    public var hash: String?
    /** Ticker of the stake pool */
    public var ticker: String?
    /** Name of the stake pool */
    public var name: String?
    /** Description of the stake pool */
    public var description: String?
    /** Home page of the stake pool */
    public var homepage: String?

    public init(poolId: String, hex: String, url: String?, hash: String?, ticker: String?, name: String?, description: String?, homepage: String?) {
        self.poolId = poolId
        self.hex = hex
        self.url = url
        self.hash = hash
        self.ticker = ticker
        self.name = name
        self.description = description
        self.homepage = homepage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case poolId = "pool_id"
        case hex
        case url
        case hash
        case ticker
        case name
        case description
        case homepage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(poolId, forKey: .poolId)
        try container.encode(hex, forKey: .hex)
        try container.encode(url, forKey: .url)
        try container.encode(hash, forKey: .hash)
        try container.encode(ticker, forKey: .ticker)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(homepage, forKey: .homepage)
    }

    public static func == (lhs: PoolMetadata, rhs: PoolMetadata) -> Bool {
        lhs.poolId == rhs.poolId &&
            lhs.hex == rhs.hex &&
            lhs.url == rhs.url &&
            lhs.hash == rhs.hash &&
            lhs.ticker == rhs.ticker &&
            lhs.name == rhs.name &&
            lhs.description == rhs.description &&
            lhs.homepage == rhs.homepage
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(poolId.hashValue)
        hasher.combine(hex.hashValue)
        hasher.combine(url.hashValue)
        hasher.combine(hash.hashValue)
        hasher.combine(ticker.hashValue)
        hasher.combine(name.hashValue)
        hasher.combine(description.hashValue)
        hasher.combine(homepage.hashValue)
    }
}
