//
// PoolRelay.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public final class PoolRelay: Codable, Hashable {
    /** IPv4 address of the relay */
    public var ipv4: String?
    /** IPv6 address of the relay */
    public var ipv6: String?
    /** DNS name of the relay */
    public var dns: String?
    /** DNS SRV entry of the relay */
    public var dnsSrv: String?
    /** Network port of the relay */
    public var port: Int

    public init(ipv4: String?, ipv6: String?, dns: String?, dnsSrv: String?, port: Int) {
        self.ipv4 = ipv4
        self.ipv6 = ipv6
        self.dns = dns
        self.dnsSrv = dnsSrv
        self.port = port
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ipv4
        case ipv6
        case dns
        case dnsSrv = "dns_srv"
        case port
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(ipv4, forKey: .ipv4)
        try container.encode(ipv6, forKey: .ipv6)
        try container.encode(dns, forKey: .dns)
        try container.encode(dnsSrv, forKey: .dnsSrv)
        try container.encode(port, forKey: .port)
    }

    public static func == (lhs: PoolRelay, rhs: PoolRelay) -> Bool {
        lhs.ipv4 == rhs.ipv4 &&
            lhs.ipv6 == rhs.ipv6 &&
            lhs.dns == rhs.dns &&
            lhs.dnsSrv == rhs.dnsSrv &&
            lhs.port == rhs.port
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ipv4.hashValue)
        hasher.combine(ipv6.hashValue)
        hasher.combine(dns.hashValue)
        hasher.combine(dnsSrv.hashValue)
        hasher.combine(port.hashValue)
    }
}
