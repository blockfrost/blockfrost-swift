//
// TxContent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public final class TxContent: Codable, Hashable {
    /** Transaction hash */
    public var hash: String
    /** Block hash */
    public var block: String
    /** Block number */
    public var blockHeight: Int
    /** Slot number */
    public var slot: Int
    /** Transaction index within the block */
    public var index: Int
    public var outputAmount: [TxContentOutputAmount]
    /** Fees of the transaction in Lovelaces */
    public var fees: String
    /** Deposit within the transaction in Lovelaces */
    public var deposit: String
    /** Size of the transaction in Bytes */
    public var size: Int
    /** Left (included) endpoint of the timelock validity intervals */
    public var invalidBefore: String?
    /** Right (excluded) endpoint of the timelock validity intervals */
    public var invalidHereafter: String?
    /** Count of UTXOs within the transaction */
    public var utxoCount: Int
    /** Count of the withdrawals within the transaction */
    public var withdrawalCount: Int
    /** Count of the MIR certificates within the transaction */
    public var mirCertCount: Int
    /** Count of the delegations within the transaction */
    public var delegationCount: Int
    /** Count of the stake keys (de)registration and delegation certificates within the transaction */
    public var stakeCertCount: Int
    /** Count of the stake pool registration and update certificates within the transaction */
    public var poolUpdateCount: Int
    /** Count of the stake pool retirement certificates within the transaction */
    public var poolRetireCount: Int
    /** Count of asset mints and burns within the transaction */
    public var assetMintOrBurnCount: Int
    /** Count of redeemers within the transaction */
    public var redeemerCount: Int

    public init(hash: String, block: String, blockHeight: Int, slot: Int, index: Int, outputAmount: [TxContentOutputAmount], fees: String, deposit: String, size: Int, invalidBefore: String?, invalidHereafter: String?, utxoCount: Int, withdrawalCount: Int, mirCertCount: Int, delegationCount: Int, stakeCertCount: Int, poolUpdateCount: Int, poolRetireCount: Int, assetMintOrBurnCount: Int, redeemerCount: Int) {
        self.hash = hash
        self.block = block
        self.blockHeight = blockHeight
        self.slot = slot
        self.index = index
        self.outputAmount = outputAmount
        self.fees = fees
        self.deposit = deposit
        self.size = size
        self.invalidBefore = invalidBefore
        self.invalidHereafter = invalidHereafter
        self.utxoCount = utxoCount
        self.withdrawalCount = withdrawalCount
        self.mirCertCount = mirCertCount
        self.delegationCount = delegationCount
        self.stakeCertCount = stakeCertCount
        self.poolUpdateCount = poolUpdateCount
        self.poolRetireCount = poolRetireCount
        self.assetMintOrBurnCount = assetMintOrBurnCount
        self.redeemerCount = redeemerCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hash
        case block
        case blockHeight = "block_height"
        case slot
        case index
        case outputAmount = "output_amount"
        case fees
        case deposit
        case size
        case invalidBefore = "invalid_before"
        case invalidHereafter = "invalid_hereafter"
        case utxoCount = "utxo_count"
        case withdrawalCount = "withdrawal_count"
        case mirCertCount = "mir_cert_count"
        case delegationCount = "delegation_count"
        case stakeCertCount = "stake_cert_count"
        case poolUpdateCount = "pool_update_count"
        case poolRetireCount = "pool_retire_count"
        case assetMintOrBurnCount = "asset_mint_or_burn_count"
        case redeemerCount = "redeemer_count"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(hash, forKey: .hash)
        try container.encode(block, forKey: .block)
        try container.encode(blockHeight, forKey: .blockHeight)
        try container.encode(slot, forKey: .slot)
        try container.encode(index, forKey: .index)
        try container.encode(outputAmount, forKey: .outputAmount)
        try container.encode(fees, forKey: .fees)
        try container.encode(deposit, forKey: .deposit)
        try container.encode(size, forKey: .size)
        try container.encode(invalidBefore, forKey: .invalidBefore)
        try container.encode(invalidHereafter, forKey: .invalidHereafter)
        try container.encode(utxoCount, forKey: .utxoCount)
        try container.encode(withdrawalCount, forKey: .withdrawalCount)
        try container.encode(mirCertCount, forKey: .mirCertCount)
        try container.encode(delegationCount, forKey: .delegationCount)
        try container.encode(stakeCertCount, forKey: .stakeCertCount)
        try container.encode(poolUpdateCount, forKey: .poolUpdateCount)
        try container.encode(poolRetireCount, forKey: .poolRetireCount)
        try container.encode(assetMintOrBurnCount, forKey: .assetMintOrBurnCount)
        try container.encode(redeemerCount, forKey: .redeemerCount)
    }

    public static func == (lhs: TxContent, rhs: TxContent) -> Bool {
        lhs.hash == rhs.hash &&
            lhs.block == rhs.block &&
            lhs.blockHeight == rhs.blockHeight &&
            lhs.slot == rhs.slot &&
            lhs.index == rhs.index &&
            lhs.outputAmount == rhs.outputAmount &&
            lhs.fees == rhs.fees &&
            lhs.deposit == rhs.deposit &&
            lhs.size == rhs.size &&
            lhs.invalidBefore == rhs.invalidBefore &&
            lhs.invalidHereafter == rhs.invalidHereafter &&
            lhs.utxoCount == rhs.utxoCount &&
            lhs.withdrawalCount == rhs.withdrawalCount &&
            lhs.mirCertCount == rhs.mirCertCount &&
            lhs.delegationCount == rhs.delegationCount &&
            lhs.stakeCertCount == rhs.stakeCertCount &&
            lhs.poolUpdateCount == rhs.poolUpdateCount &&
            lhs.poolRetireCount == rhs.poolRetireCount &&
            lhs.assetMintOrBurnCount == rhs.assetMintOrBurnCount &&
            lhs.redeemerCount == rhs.redeemerCount
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash.hashValue)
        hasher.combine(block.hashValue)
        hasher.combine(blockHeight.hashValue)
        hasher.combine(slot.hashValue)
        hasher.combine(index.hashValue)
        hasher.combine(outputAmount.hashValue)
        hasher.combine(fees.hashValue)
        hasher.combine(deposit.hashValue)
        hasher.combine(size.hashValue)
        hasher.combine(invalidBefore.hashValue)
        hasher.combine(invalidHereafter.hashValue)
        hasher.combine(utxoCount.hashValue)
        hasher.combine(withdrawalCount.hashValue)
        hasher.combine(mirCertCount.hashValue)
        hasher.combine(delegationCount.hashValue)
        hasher.combine(stakeCertCount.hashValue)
        hasher.combine(poolUpdateCount.hashValue)
        hasher.combine(poolRetireCount.hashValue)
        hasher.combine(assetMintOrBurnCount.hashValue)
        hasher.combine(redeemerCount.hashValue)
    }
}
