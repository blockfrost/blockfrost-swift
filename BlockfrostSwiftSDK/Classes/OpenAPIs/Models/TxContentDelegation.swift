//
// TxContentDelegation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public final class TxContentDelegation: Codable, Hashable {
    /** Index of the certificate within the transaction */
    @available(*, deprecated, message: "This property is deprecated.")
    public var index: Int
    /** Index of the certificate within the transaction */
    public var certIndex: Int
    /** Bech32 delegation stake address */
    public var address: String
    /** Bech32 ID of delegated stake pool */
    public var poolId: String
    /** Epoch in which the delegation becomes active */
    public var activeEpoch: Int

    public init(index: Int, certIndex: Int, address: String, poolId: String, activeEpoch: Int) {
        self.index = index
        self.certIndex = certIndex
        self.address = address
        self.poolId = poolId
        self.activeEpoch = activeEpoch
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case index
        case certIndex = "cert_index"
        case address
        case poolId = "pool_id"
        case activeEpoch = "active_epoch"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(index, forKey: .index)
        try container.encode(certIndex, forKey: .certIndex)
        try container.encode(address, forKey: .address)
        try container.encode(poolId, forKey: .poolId)
        try container.encode(activeEpoch, forKey: .activeEpoch)
    }

    public static func == (lhs: TxContentDelegation, rhs: TxContentDelegation) -> Bool {
        lhs.index == rhs.index &&
            lhs.certIndex == rhs.certIndex &&
            lhs.address == rhs.address &&
            lhs.poolId == rhs.poolId &&
            lhs.activeEpoch == rhs.activeEpoch
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(index.hashValue)
        hasher.combine(certIndex.hashValue)
        hasher.combine(address.hashValue)
        hasher.combine(poolId.hashValue)
        hasher.combine(activeEpoch.hashValue)
    }
}
