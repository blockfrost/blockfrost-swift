//
// TxContentPoolCert.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public final class TxContentPoolCert: Codable, Hashable {
    /** Index of the certificate within the transaction */
    public var certIndex: Int
    /** Bech32 encoded pool ID */
    public var poolId: String
    /** VRF key hash */
    public var vrfKey: String
    /** Stake pool certificate pledge in Lovelaces */
    public var pledge: String
    /** Margin tax cost of the stake pool */
    public var marginCost: Double
    /** Fixed tax cost of the stake pool in Lovelaces */
    public var fixedCost: String
    /** Bech32 reward account of the stake pool */
    public var rewardAccount: String
    public var owners: [String]
    public var metadata: AnyCodable?
    public var relays: [AnyCodable]
    /** Epoch that the delegation becomes active */
    public var activeEpoch: Int

    public init(certIndex: Int, poolId: String, vrfKey: String, pledge: String, marginCost: Double, fixedCost: String, rewardAccount: String, owners: [String], metadata: AnyCodable?, relays: [AnyCodable], activeEpoch: Int) {
        self.certIndex = certIndex
        self.poolId = poolId
        self.vrfKey = vrfKey
        self.pledge = pledge
        self.marginCost = marginCost
        self.fixedCost = fixedCost
        self.rewardAccount = rewardAccount
        self.owners = owners
        self.metadata = metadata
        self.relays = relays
        self.activeEpoch = activeEpoch
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case certIndex = "cert_index"
        case poolId = "pool_id"
        case vrfKey = "vrf_key"
        case pledge
        case marginCost = "margin_cost"
        case fixedCost = "fixed_cost"
        case rewardAccount = "reward_account"
        case owners
        case metadata
        case relays
        case activeEpoch = "active_epoch"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(certIndex, forKey: .certIndex)
        try container.encode(poolId, forKey: .poolId)
        try container.encode(vrfKey, forKey: .vrfKey)
        try container.encode(pledge, forKey: .pledge)
        try container.encode(marginCost, forKey: .marginCost)
        try container.encode(fixedCost, forKey: .fixedCost)
        try container.encode(rewardAccount, forKey: .rewardAccount)
        try container.encode(owners, forKey: .owners)
        try container.encode(metadata, forKey: .metadata)
        try container.encode(relays, forKey: .relays)
        try container.encode(activeEpoch, forKey: .activeEpoch)
    }

    public static func == (lhs: TxContentPoolCert, rhs: TxContentPoolCert) -> Bool {
        lhs.certIndex == rhs.certIndex &&
            lhs.poolId == rhs.poolId &&
            lhs.vrfKey == rhs.vrfKey &&
            lhs.pledge == rhs.pledge &&
            lhs.marginCost == rhs.marginCost &&
            lhs.fixedCost == rhs.fixedCost &&
            lhs.rewardAccount == rhs.rewardAccount &&
            lhs.owners == rhs.owners &&
            lhs.metadata == rhs.metadata &&
            lhs.relays == rhs.relays &&
            lhs.activeEpoch == rhs.activeEpoch
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(certIndex.hashValue)
        hasher.combine(poolId.hashValue)
        hasher.combine(vrfKey.hashValue)
        hasher.combine(pledge.hashValue)
        hasher.combine(marginCost.hashValue)
        hasher.combine(fixedCost.hashValue)
        hasher.combine(rewardAccount.hashValue)
        hasher.combine(owners.hashValue)
        hasher.combine(metadata.hashValue)
        hasher.combine(relays.hashValue)
        hasher.combine(activeEpoch.hashValue)
    }
}
