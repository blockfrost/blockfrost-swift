//
// TxContentUtxoInputs.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public final class TxContentUtxoInputs: Codable, Hashable {
    /** Input address */
    public var address: String
    public var amount: [TxContentOutputAmount]
    /** Hash of the UTXO transaction */
    public var txHash: String
    /** UTXO index in the transaction */
    public var outputIndex: Double
    /** The hash of the transaction output datum */
    public var dataHash: String?
    /** Whether the input is a collateral consumed on script validation failure */
    public var collateral: Bool

    public init(address: String, amount: [TxContentOutputAmount], txHash: String, outputIndex: Double, dataHash: String?, collateral: Bool) {
        self.address = address
        self.amount = amount
        self.txHash = txHash
        self.outputIndex = outputIndex
        self.dataHash = dataHash
        self.collateral = collateral
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case amount
        case txHash = "tx_hash"
        case outputIndex = "output_index"
        case dataHash = "data_hash"
        case collateral
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encode(amount, forKey: .amount)
        try container.encode(txHash, forKey: .txHash)
        try container.encode(outputIndex, forKey: .outputIndex)
        try container.encode(dataHash, forKey: .dataHash)
        try container.encode(collateral, forKey: .collateral)
    }

    public static func == (lhs: TxContentUtxoInputs, rhs: TxContentUtxoInputs) -> Bool {
        lhs.address == rhs.address &&
            lhs.amount == rhs.amount &&
            lhs.txHash == rhs.txHash &&
            lhs.outputIndex == rhs.outputIndex &&
            lhs.dataHash == rhs.dataHash &&
            lhs.collateral == rhs.collateral
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address.hashValue)
        hasher.combine(amount.hashValue)
        hasher.combine(txHash.hashValue)
        hasher.combine(outputIndex.hashValue)
        hasher.combine(dataHash.hashValue)
        hasher.combine(collateral.hashValue)
    }
}
